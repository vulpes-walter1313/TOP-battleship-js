{"version":3,"file":"main.js","mappings":"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","sources":["webpack:///./src/Controller.js","webpack:///./src/modules/Ship.js","webpack:///./src/modules/Gameboard.js","webpack:///./src/modules/Player.js","webpack:///./src/App.js","webpack:///./src/index.js"],"sourcesContent":["class Controller {\n  static cleanElement(parent) {\n    while (parent.firstElementChild) {\n      parent.removeChild(parent.firstElementChild);\n    }\n  }\n\n  static insertAfter(parent, child) {\n    parent.appendChild(child);\n  }\n}\n\nexport default Controller;","class Ship {\n  constructor(length, name) {\n    this.length = length;\n    this.name = name;\n    this.hits = [];\n    this.sunk = false;\n  }\n  hit(position) {\n    this.hits.push(position);\n  }\n  isSunk() {\n    if (this.hits.length === this.length) {\n      this.sunk = true;\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n\nexport default Ship;","import Ship from \"./Ship\";\n\nclass Gameboard {\n  constructor() {\n    this.board = Gameboard.createBoard();\n    this.ships = {};\n  }\n  static createBoard() {\n    let board = [];\n    for (let r = 0; r < 10; r++) {\n      let row = [];\n      for (let i = 0; i < 10; i++) {\n        let cell = {\n          hasShip: false,\n          hasBeenShot: false\n        };\n        row.push(cell);\n      }\n      board.push(row);\n    }\n    return board;\n  }\n  areAllShipsSunk() {\n    // This method will be used to see when to flip the\n    // allShipsSunk flag to true. But a test argument can be used\n    // Simply to see if it gets called.\n    let shipsStatus = [];\n    if (Object.keys(this.ships).length === 0) {\n      return false;\n    }\n\n    for (const ship in this.ships) {\n      /*\n      pushes a boolean true of false to shipsStatus\n      depending is the ship is sunk\n      */\n      shipsStatus.push(this.ships[ship].isShipSunk);\n    }\n\n    if (shipsStatus.every(val => val === true)) {\n      // If all ships are sunk, then it returns true\n      return true;\n    } else { \n      return false;\n    }\n  \n  }\n\n  placeShip(ship, coordinates) {\n    if (!this.isPlacementValid([coordinates[0], coordinates[1]], ship.length, coordinates[2])) {\n      // If placement is invalid then it throws an error \n      throw new Error('Placement is invalid');\n    }\n    // prepares a object with ship.name as key that holds an object of information on the ship.\n\n    this.ships[ship.name] = {\n      'ship': ship,\n      isShipSunk: false,\n      locations: []\n    };\n\n    if (coordinates[2] === 'x') {\n      for (let i = coordinates[1]; i < coordinates[1] + ship.length; i++) {\n        this.board[coordinates[0]][i]['hasShip'] = true;\n        this.board[coordinates[0]][i]['shipName'] = ship.name;\n        this.ships[ship.name].locations.push([coordinates[0], i]);\n      }\n    } else if (coordinates[2] === 'y') {\n      let firstArrIndex = coordinates[0];\n      for (let i = 0; i < ship.length; i++) {\n        this.board[firstArrIndex][coordinates[1]]['hasShip'] = true;\n        this.board[firstArrIndex][coordinates[1]]['shipName'] = ship.name;\n        firstArrIndex++;\n        this.ships[ship.name].locations.push([firstArrIndex, coordinates[1]]);\n      }\n    }\n  }\n\n  isPlacementValid(coordinates, length, axis) {\n    /* \n      Coordinates is an array of two elements:\n      [firstArrIndex, secondArrIndex]\n    */\n    let isValid = true;\n    if (axis === 'x') { \n      for (let i = coordinates[1]; i < coordinates[1] + length; i++) {\n        if (this.board[coordinates[0]][i] === undefined || this.board[coordinates[0]][i]['hasShip'] === true) {\n          isValid = false;\n          break;\n        }\n      }\n    } else if (axis === 'y') {\n      // Axis is y\n      for (let i = coordinates[0]; i < coordinates[0] + length; i++) {\n        if (this.board[i] === undefined || this.board[i][coordinates[1]]['hasShip'] === true ) {\n          isValid = false;\n          break;\n        }\n      }\n    }\n    return isValid;\n  }\n\n  receiveAttack(coordinates) {\n    /*\n      coordinates is an array:\n      [firstArrayIndex, secondArrayIndex]\n    */\n    const [firstIndex, secondIndex] = coordinates;\n    \n    if (this.board[firstIndex][secondIndex]['hasBeenShot'] === false) {\n      this.registerAttack(firstIndex, secondIndex);\n\n      // Condition if location has ship\n      if (this.board[firstIndex][secondIndex]['hasShip'] === true) {\n        this.registerShipHit(firstIndex, secondIndex);\n        return 'hit';\n      } else {\n        return 'miss';\n      }\n    } else {\n      return 'Cell has already been shot';\n    }\n  }\n\n  registerAttack(firstIndex, secondIndex) {\n    this.board[firstIndex][secondIndex]['hasBeenShot'] = true;\n  }\n\n  registerShipHit(firstIndex, secondIndex) {\n    let shipName = this.board[firstIndex][secondIndex]['shipName'];\n    this.ships[shipName].ship.hit([firstIndex, secondIndex]);\n    // checks to see if ship got sunked\n    if (this.ships[shipName].ship.isSunk() === true) {\n      this.ships[shipName].isShipSunk = true;\n    }\n  }\n\n  computerPlaceShips() {\n    const shipsList = [\n      ['carrier', 5],\n      ['battleship', 4],\n      ['cruiser', 3],\n      ['submarine', 3],\n      ['destroyer', 2],\n    ];\n\n    const ships = shipsList.map(shipInfo => new Ship(shipInfo[1], shipInfo[0]));\n\n    ships.forEach(ship => {\n      let shipPlaced = false;\n      while (!shipPlaced) {\n        const startPoint = this.randomPointGen();\n        if (this.isPlacementValid([startPoint[0], startPoint[1]], ship.length, startPoint[2])) {\n          this.placeShip(ship, startPoint);\n          shipPlaced = true;\n        }\n      }\n    });\n    \n\n  }\n  randomPointGen() {\n    const randomOutI = Math.floor(Math.random() * (9 - 0) + 0);\n    const randomInI = Math.floor(Math.random() * (9 - 0) + 0);\n    const axis = Math.floor(Math.random() * 2) === 0 ? 'x' : 'y';\n    return [randomOutI, randomInI, axis];\n  }\n  resetBoard() {\n    this.board = Gameboard.createBoard();\n  }\n}\n\nexport default Gameboard;","import Gameboard from \"./Gameboard\";\n\nclass Player {\n  constructor(name) {\n    this.name = name || 'computer';\n    this.gameboard = new Gameboard();\n    this.enemyBoard = new Gameboard();\n    this.validMoves = Player.resetMoves();\n  }\n\n  computerMove() {\n    const randomNumber = Math.floor(Math.random() * this.validMoves.length);\n    const [firstIndex, secondIndex] = this.validMoves[randomNumber];\n    this.validMoves.splice(randomNumber, 1);\n    return [firstIndex, secondIndex];\n  }\n\n  randomNumGen() {\n    const randomNumber = Math.floor(Math.random() * (9 - 0) + 0);\n    return randomNumber;\n  }\n\n  static resetMoves() {\n    let moves = [];\n    for (let outI = 0; outI < 10; outI++) {\n      for (let inI = 0; inI < 10; inI ++) {\n        const point = [outI, inI];\n        moves.push(point);\n      }\n    }\n    return moves;\n  }\n}\n\nexport default Player;","import Controller from \"./Controller.js\";\nimport Player from './modules/Player';\nimport Ship from './modules/Ship';\n\nclass App {\n  constructor(id) {\n    this.app = document.querySelector(id);\n  }\n  run() {\n    this.renderStart();\n  }\n\n  renderStart() {\n    Controller.cleanElement(this.app);\n    const playerInfoDiv = document.createElement('div');\n    playerInfoDiv.classList.add('player-info');\n\n    const playerH2 = document.createElement('h2');\n    playerH2.textContent = \"Set your name\";\n    \n    const nameForm = document.createElement('form');\n    nameForm.classList.add('player-form');\n    nameForm.innerHTML = `\n      <label for=\"name\">Name: </label>\n      <input type=\"text\" name=\"name\">\n    `;\n    const nameSubmit = this.nameSubmission.bind(this);\n    nameForm.addEventListener('submit', nameSubmit);\n\n    Controller.insertAfter(playerInfoDiv, playerH2);\n    Controller.insertAfter(playerInfoDiv, nameForm);\n    Controller.insertAfter(this.app, playerInfoDiv);\n  }\n  nameSubmission() {\n    const nameForm = document.querySelector('.player-form');\n    const formData = new FormData(nameForm);\n    const playerName = formData.get('name');\n    this.player1 = new Player(playerName);\n    this.computer = new Player();\n    this.setPlayerShips();\n  }\n  setPlayerShips() {\n    Controller.cleanElement(this.app);\n    const setShipsContainer = document.createElement('div');\n    setShipsContainer.classList.add('set-player-ships-container');\n\n    const title = document.createElement('h2');\n    title.textContent = 'Place your Carrier';\n    title.classList.add('placement-shipname-display');\n\n    const rotateBtn = document.createElement('button');\n    rotateBtn.setAttribute('type', 'button');\n    rotateBtn.textContent = 'Rotate';\n    rotateBtn.setAttribute('data-axis', 'x');\n\n    rotateBtn.addEventListener('click', ()=> {\n      const gridCells = document.querySelectorAll('.placement-grid-cell');\n      const axisDisplay = document.querySelector('.placement-axis-display');\n      const axisBtn = document.querySelector('.set-player-ships-container button');\n      if (axisBtn.dataset.axis === 'x') {\n        axisBtn.dataset.axis = 'y';\n      } else if (axisBtn.dataset.axis === 'y') {\n        axisBtn.dataset.axis = 'x';\n      }\n      gridCells.forEach(cell => {\n        if (axisBtn.dataset.axis === 'x') {\n          cell.setAttribute('data-orientation', 'x');\n          axisDisplay.textContent = 'Placing in X-axis';\n        } else {\n          cell.setAttribute('data-orientation', 'y');\n          axisDisplay.textContent = 'Placing in Y-axis';\n        }\n      })\n    });\n\n    const axisDisplay = document.createElement('p');\n    axisDisplay.classList.add('placement-axis-display');\n    axisDisplay.textContent = 'Placing in X-axis';\n\n    const boardGrid = document.createElement('div');\n    boardGrid.classList.add('placement-grid');\n\n    const shipsList = [\n      ['carrier', 5],\n      ['battleship', 4],\n      ['cruiser', 3],\n      ['submarine', 3],\n      ['destroyer', 2],\n    ];\n    \n    const firstShip = shipsList.shift();\n    this.buildPlacementGrid(boardGrid, firstShip);\n\n    // click event to submit coordinates\n    boardGrid.addEventListener('click', (e) => {\n      if (e.target.classList.contains('placement-grid-cell')) {\n        if (e.target.dataset.shipname != 'undefined') {\n          const shipName = e.target.dataset.shipname;\n          const shipLength = parseInt(e.target.dataset.shiplength);\n          const ship = new Ship(shipLength, shipName);\n          const coords = [\n            parseInt(e.target.dataset.outeri),\n            parseInt(e.target.dataset.inneri),\n            e.target.dataset.orientation\n          ];\n          try {\n            this.player1.gameboard.placeShip(ship, coords);\n            if (shipsList.length != 0) {\n              const shipData = shipsList.shift();\n              const boardGrid = document.querySelector('.placement-grid');\n              this.buildPlacementGrid(boardGrid, shipData);\n              this.updatePlacementShipName();\n            } else {\n              this.computer.gameboard.computerPlaceShips();\n              console.log(this.computer.gameboard);\n              this.startTheGame();\n              // this.updatePlaceShipGridAttributes('data-shipname', 'undefined');\n            }\n          } catch (err) {\n            console.log(err);\n          }\n        } else {\n          console.log('no more ships to place');\n        }\n      } \n    });\n\n    // hover on event to handle illustration of placement\n    boardGrid.addEventListener('mouseover', (e) => {\n      if (e.target.classList.contains('placement-grid-cell')) {\n        const hoveredCell = e.target;\n        const allCells = Array.from(document.querySelectorAll('.placement-grid-cell'));\n        const axis = hoveredCell.dataset.orientation;\n        const shiplength = parseInt(hoveredCell.dataset.shiplength);\n        const outerI = parseInt(hoveredCell.dataset.outeri);\n        const innerI = parseInt(hoveredCell.dataset.inneri);\n        if (axis === 'x') {\n          const cellsToHighlight = [];\n          for (let i = innerI; i < innerI + shiplength; i++) {\n           let cell = allCells.find(cell => cell.dataset.outeri === outerI.toString() && cell.dataset.inneri === i.toString());\n           if (cell) {\n             cellsToHighlight.push(cell);\n           }\n          }\n          cellsToHighlight.forEach(cell => cell.classList.add('hovered'));\n\n        } else if (axis === 'y' ){\n          const cellsToHighlight = [];\n          for (let o = outerI; o < outerI + shiplength; o++) {\n           let cell = allCells.find(cell => cell.dataset.outeri === o.toString() && cell.dataset.inneri === innerI.toString());\n           if (cell) {\n             cellsToHighlight.push(cell);\n           }\n          }\n          cellsToHighlight.forEach(cell => cell.classList.add('hovered'));\n        }\n\n      } else {\n        return;\n      }\n    });\n    \n    // Hover off event\n    boardGrid.addEventListener('mouseout', (e) => {\n      const allCells = document.querySelectorAll('.placement-grid-cell');\n      allCells.forEach(cell => cell.classList.remove('hovered'));\n    });\n    Controller.insertAfter(setShipsContainer, title);\n    Controller.insertAfter(setShipsContainer, rotateBtn);\n    Controller.insertAfter(setShipsContainer, axisDisplay);\n    Controller.insertAfter(setShipsContainer, boardGrid);\n    Controller.insertAfter(this.app, setShipsContainer);\n  }\n  \n  updatePlaceShipGridAttributes(attrName, attrValue) {\n    const cells = document.querySelectorAll('.placement-grid-cell');\n    cells.forEach(cell => {\n      cell.setAttribute(attrName, attrValue);\n    });\n  }\n  updatePlacementShipName() {\n    const shipname = document.querySelector('.placement-grid-cell').dataset.shipname;\n    const formattedName = shipname.slice(0,1).toUpperCase() + shipname.slice(1);\n    const shipNameDisplay = document.querySelector('.placement-shipname-display');\n    shipNameDisplay.textContent = `Place your ${formattedName}`;\n  }\n  buildPlacementGrid(gridDisplay, shipInfo) {\n    Controller.cleanElement(gridDisplay);\n\n    const axisBtn = document.querySelector('.set-player-ships-container button');\n    let axis;\n    if (axisBtn) {\n      axis = axisBtn.dataset.axis;\n    } else {\n      axis = 'x';\n    }\n\n\n    for (let outI = 0; outI < 10; outI++) {\n      for (let inI = 0; inI < 10; inI++) {\n        const cell = document.createElement('div');\n        cell.classList.add('placement-grid-cell');\n        // Add ship details into attributes\n        cell.setAttribute('data-outeri', outI);\n        cell.setAttribute('data-inneri', inI);\n        cell.setAttribute('data-orientation', axis);\n        cell.setAttribute('data-shipname', shipInfo[0]);\n        cell.setAttribute('data-shiplength', shipInfo[1]);\n        if (this.player1.gameboard.board[outI][inI].hasShip === true) {\n          cell.classList.add('ship-placed');\n        }\n        \n        Controller.insertAfter(gridDisplay, cell);\n      }\n    }\n  }\n\n  startTheGame() {\n    Controller.cleanElement(this.app);\n    const gameboardContainer = document.createElement('div');\n    gameboardContainer.classList.add('gameplay-display-container');\n    // player1\n    const player1DisplayWrapper = document.createElement('div');\n    player1DisplayWrapper.classList.add('player1-display-wrapper');\n\n    const player1NameTitle = document.createElement('h2');\n    player1NameTitle.textContent = `${this.player1.name}`;\n\n    const player1BoardDisplay = document.createElement('div');\n    player1BoardDisplay.classList.add('gameplay-player1-board');\n\n    this.buildGameboard(player1BoardDisplay, this.player1.gameboard.board);\n    \n    // computer player\n    const computerDisplayWrapper = document.createElement('div');\n    computerDisplayWrapper.classList.add('computer-display-wrapper');\n\n    const computerName = document.createElement('h2');\n    computerName.textContent = `${this.computer.name}`;\n\n    const computerBoardDisplay = document.createElement('div');\n    computerBoardDisplay.classList.add('gameplay-computer-board');\n    this.buildGameboard(computerBoardDisplay, this.player1.enemyBoard.board);\n\n    computerBoardDisplay.addEventListener('mouseover', (e) => {\n      if (e.target.classList.contains('gameboard-grid-cell')) {\n        e.target.classList.add('cell-hovered');\n      }\n    });\n    computerBoardDisplay.addEventListener('mouseout', (e) => {\n      if (e.target.classList.contains('gameboard-grid-cell')) {\n        e.target.classList.remove('cell-hovered');\n      }\n    });\n    \n    computerBoardDisplay.addEventListener('click', (e) => {\n      // console.log(`${e.target.dataset.outeri}, ${e.target.dataset.inneri}`);\n      const coords = [\n        e.target.dataset.outeri,\n        e.target.dataset.inneri\n      ];\n      this.playerTurn(coords);\n    });\n\n\n    Controller.insertAfter(player1DisplayWrapper, player1NameTitle);\n    Controller.insertAfter(player1DisplayWrapper, player1BoardDisplay);\n    Controller.insertAfter(computerDisplayWrapper, computerName);\n    Controller.insertAfter(computerDisplayWrapper, computerBoardDisplay);\n    Controller.insertAfter(gameboardContainer, player1DisplayWrapper);\n    Controller.insertAfter(gameboardContainer, computerDisplayWrapper);\n    Controller.insertAfter(this.app, gameboardContainer);\n  }\n\n  buildGameboard(displayDiv, board) {\n    Controller.cleanElement(displayDiv);\n\n    for (let outI = 0; outI < 10; outI++) {\n      for (let inI = 0; inI < 10; inI++) {\n        const cell = document.createElement('div');\n        cell.classList.add('gameboard-grid-cell');\n        // Add ship details into attributes\n        cell.setAttribute('data-outeri', outI);\n        cell.setAttribute('data-inneri', inI);\n        if (board[outI][inI].hasShip === true) {\n          cell.classList.add('gameboard-ship-placed');\n        }\n        if (board[outI][inI]['hasBeenShot'] === true && board[outI][inI]['hasShip'] === true) {\n          cell.classList.add('grid-cell-hit');\n        } else if (board[outI][inI]['hasBeenShot'] === true && board[outI][inI]['hasShip'] === false) {\n          cell.classList.add('grid-cell-miss');\n        }\n        \n        Controller.insertAfter(displayDiv, cell);\n      }\n    }\n  }\n\n  playerTurn(coordinates) {\n    const [outeri, inneri] = coordinates;\n    console.log(outeri, inneri);\n\n    // if coordinate already hit, exit\n    if (this.player1.enemyBoard.board[outeri][inneri]['hasBeenShot'] === true) {\n      return;\n    }\n\n    // player one attacks computer\n    const result = this.computer.gameboard.receiveAttack([outeri, inneri]);\n    this.player1.enemyBoard.receiveAttack([outeri, inneri]);\n\n    // depending on hit or miss, update player1.enemyBoard accordingly\n    if (result === 'hit') {\n      this.player1.enemyBoard.board[outeri][inneri]['hasShip'] = true;\n      const enemyBoardDisplay = document.querySelector('.gameplay-computer-board');\n      this.buildGameboard(enemyBoardDisplay, this.player1.enemyBoard.board);\n    } else if (result === 'miss') {\n      const enemyBoardDisplay = document.querySelector('.gameplay-computer-board');\n      this.buildGameboard(enemyBoardDisplay, this.player1.enemyBoard.board);\n    }\n\n    // check if computer player has all ships sunk\n    if (this.computer.gameboard.areAllShipsSunk()) {\n      this.winnerAnnoucement(this.player1);\n    } else {\n      // if computer ships not sunk then computer attacks player 1\n      const computerMoveCoords = this.computer.computerMove();\n      this.player1.gameboard.receiveAttack(computerMoveCoords); // Dont need the return value\n      const player1BoardDisplay = document.querySelector('.gameplay-player1-board');\n      this.buildGameboard(player1BoardDisplay, this.player1.gameboard.board);\n    }\n\n    // check if player1 ships sunk\n    if (this.player1.gameboard.areAllShipsSunk()) {\n      this.winnerAnnoucement(this.computer)\n    }\n  }\n\n  winnerAnnoucement(player) {\n    const winnerBannerContainer = document.createElement('div');\n    winnerBannerContainer.classList.add('winner-banner-container');\n\n    const winnerBanner = document.createElement('div');\n    winnerBanner.classList.add('winner-banner');\n    const winnerContent = document.createElement('p');\n    winnerContent.textContent = `${player.name} Won!!!`;\n\n    const playAgainBtn = document.createElement('button');\n    playAgainBtn.setAttribute('type', 'button');\n    playAgainBtn.textContent = \"Play Again\";\n\n    playAgainBtn.addEventListener('click', () => {\n      this.restartGame();\n    })\n\n    winnerBanner.appendChild(winnerContent);\n    winnerBanner.appendChild(playAgainBtn);\n\n    winnerBannerContainer.appendChild(winnerBanner);\n    Controller.insertAfter(this.app, winnerBannerContainer);\n  }\n  restartGame() {\n    // reset player1 and computer gameboards and enemyboards\n    this.player1.gameboard.resetBoard();\n    this.player1.enemyBoard.resetBoard();\n    this.computer.gameboard.resetBoard();\n    this.computer.enemyBoard.resetBoard();\n    this.computer.validMoves = Player.resetMoves();\n    // place player 1's ships again\n    this.setPlayerShips()\n  }\n}\n\nexport default App;","import './sass/styles.scss';\nimport App from './App.js';\nconsole.log(\"i'm in...\");\n\nfunction startApp() {\n  const app = new App('#app');\n  app.run();\n}\n\ndocument.addEventListener('DOMContentLoaded', startApp);"],"names":["Controller","parent","firstElementChild","removeChild","child","appendChild","Ship","length","name","this","hits","sunk","position","push","Gameboard","board","createBoard","ships","r","row","i","hasShip","hasBeenShot","shipsStatus","Object","keys","ship","isShipSunk","every","val","coordinates","isPlacementValid","Error","locations","firstArrIndex","axis","isValid","undefined","firstIndex","secondIndex","registerAttack","registerShipHit","shipName","hit","isSunk","map","shipInfo","forEach","shipPlaced","startPoint","randomPointGen","placeShip","Math","floor","random","Player","gameboard","enemyBoard","validMoves","resetMoves","moves","outI","inI","point","randomNumber","splice","App","id","app","document","querySelector","renderStart","playerInfoDiv","createElement","classList","add","playerH2","textContent","nameForm","innerHTML","nameSubmit","nameSubmission","bind","addEventListener","playerName","FormData","get","player1","computer","setPlayerShips","setShipsContainer","title","rotateBtn","setAttribute","gridCells","querySelectorAll","axisDisplay","axisBtn","dataset","cell","boardGrid","shipsList","firstShip","shift","buildPlacementGrid","e","target","contains","shipname","shipLength","parseInt","shiplength","coords","outeri","inneri","orientation","shipData","updatePlacementShipName","computerPlaceShips","console","log","startTheGame","err","hoveredCell","allCells","Array","from","outerI","innerI","cellsToHighlight","find","toString","o","remove","attrName","attrValue","formattedName","slice","toUpperCase","gridDisplay","gameboardContainer","player1DisplayWrapper","player1NameTitle","player1BoardDisplay","buildGameboard","computerDisplayWrapper","computerName","computerBoardDisplay","playerTurn","displayDiv","result","receiveAttack","enemyBoardDisplay","areAllShipsSunk","winnerAnnoucement","computerMoveCoords","computerMove","player","winnerBannerContainer","winnerBanner","winnerContent","playAgainBtn","restartGame","resetBoard","run"],"sourceRoot":""}